import os
import json
from PySide6.QtCore import QSettings
from midi_constants import MidiConstants

class Config:
    """Enhanced configuration class with comprehensive settings."""
    
    def __init__(self):
        # Core settings
        self.MESH_RESOLUTION = 50
        self.MIDI_PORT = None
        self.AUDIO_SAMPLE_RATE = 44100
        self.AUDIO_CHUNK_SIZE = 512
        self.AUDIO_ONSET_THRESHOLD = 1.5
        
        # Extended MIDI settings
        self.VELOCITY_SENSITIVITY = 1.0
        self.NOTE_MIN = 0
        self.NOTE_MAX = 127
        self.MORPH_CC = 1
        self.NOTE_TIMEOUT = 60
        self.MIDI_CHANNEL = 0  # 0 = all channels
        self.MIDI_AUTO_RECONNECT = True
        self.MIDI_ENABLED = True
        
        # Extended Audio settings
        self.AUDIO_ENABLED = True
        self.AUDIO_DEVICE_INDEX = None
        self.AUDIO_CHANNELS = 1
        self.AUDIO_COLOR_STRENGTH = 1.0
        self.AUDIO_MORPH_STRENGTH = 0.2
        self.FREQ_MIN = 80
        self.FREQ_MAX = 8000
        self.AUDIO_FREQUENCY_RANGE = (80, 8000)
        self.AUDIO_FFT_SIZE = 2048
        self.AUDIO_HOP_LENGTH = 512
        self.AUDIO_SPECTRAL_ROLLOFF = 0.85
        self.ENABLE_SPECTRAL_CENTROID = True
        self.ENABLE_MFCC = False
        self.ENABLE_TEMPO = False
        
        # Visualization settings
        self.COLOR_SATURATION = 0.8
        self.COLOR_BRIGHTNESS = 1.0
        self.MORPH_SPEED = 1.0
        self.COLOR_TRANSITION_SPEED = 0.5
        self.FLASH_DURATION = 150
        self.SMOOTH_SHADING = True
        self.WIREFRAME_MODE = False
        self.AUTO_ROTATE = False
        self.ROTATION_SPEED = 1.0
        self.DEFAULT_COLOR = [0.8, 0.8, 0.8]  # Light gray RGB
        
        # Performance settings
        self.TARGET_FPS = 60
        self.VSYNC = True
        self.RENDER_QUALITY = "High"
        self.MEMORY_LIMIT = 1000  # MB
        self.CLEANUP_INTERVAL = 5  # seconds
        self.FPS_WARNING = 30
        self.MEMORY_WARNING = 80  # percent
        self.CPU_WARNING = 85  # percent
        self.ENABLE_PROFILING = True
        self.VERBOSE_LOGGING = False
        self.SHOW_DEBUG_INFO = False
        
        # Advanced settings
        self.OSC_IP = "127.0.0.1"
        self.OSC_PORT = 5005
        self.ENABLE_OSC = False
        self.WORKER_THREADS = 2
        self.AUDIO_PRIORITY = "High"
        self.CONFIG_DIR = os.path.expanduser("~/.morphing_visualizer")
        self.LOG_DIR = os.path.expanduser("~/.morphing_visualizer/logs")
        self.ENABLE_ML_FEATURES = False
        self.ENABLE_NETWORK_SYNC = False
        self.ENABLE_PLUGIN_SYSTEM = False
        
        # Create directories if they don't exist
        self._ensure_directories()
    
    def _ensure_directories(self):
        """Ensure required directories exist."""
        try:
            os.makedirs(self.CONFIG_DIR, exist_ok=True)
            os.makedirs(self.LOG_DIR, exist_ok=True)
        except Exception as e:
            print(f"Warning: Could not create directories: {e}")
    
    def load_from_settings(self, settings: QSettings):
        """Load configuration from QSettings."""
        try:
            # Core settings
            self.MESH_RESOLUTION = settings.value("core/mesh_resolution", self.MESH_RESOLUTION, int)
            self.MIDI_PORT = settings.value("core/midi_port", self.MIDI_PORT)
            self.AUDIO_SAMPLE_RATE = settings.value("core/audio_sample_rate", self.AUDIO_SAMPLE_RATE, int)
            self.AUDIO_CHUNK_SIZE = settings.value("core/audio_chunk_size", self.AUDIO_CHUNK_SIZE, int)
            self.AUDIO_ONSET_THRESHOLD = settings.value("core/audio_onset_threshold", self.AUDIO_ONSET_THRESHOLD, float)
            
            # MIDI settings
            self.VELOCITY_SENSITIVITY = settings.value("midi/velocity_sensitivity", self.VELOCITY_SENSITIVITY, float)
            self.NOTE_MIN = settings.value("midi/note_min", self.NOTE_MIN, int)
            self.NOTE_MAX = settings.value("midi/note_max", self.NOTE_MAX, int)
            self.MORPH_CC = settings.value("midi/morph_cc", self.MORPH_CC, int)
            self.NOTE_TIMEOUT = settings.value("midi/note_timeout", self.NOTE_TIMEOUT, int)
            self.MIDI_CHANNEL = settings.value("midi/channel", self.MIDI_CHANNEL, int)
            self.MIDI_AUTO_RECONNECT = settings.value("midi/auto_reconnect", self.MIDI_AUTO_RECONNECT, bool)
            self.MIDI_ENABLED = settings.value("midi/enabled", self.MIDI_ENABLED, bool)
            
            # Audio settings
            self.AUDIO_ENABLED = settings.value("audio/enabled", self.AUDIO_ENABLED, bool)
            self.AUDIO_DEVICE_INDEX = settings.value("audio/device_index", self.AUDIO_DEVICE_INDEX, int) if settings.value("audio/device_index") is not None else None
            self.AUDIO_COLOR_STRENGTH = settings.value("audio/color_strength", self.AUDIO_COLOR_STRENGTH, float)
            self.AUDIO_MORPH_STRENGTH = settings.value("audio/morph_strength", self.AUDIO_MORPH_STRENGTH, float)
            self.FREQ_MIN = settings.value("audio/freq_min", self.FREQ_MIN, int)
            self.FREQ_MAX = settings.value("audio/freq_max", self.FREQ_MAX, int)
            self.AUDIO_FREQUENCY_RANGE = (self.FREQ_MIN, self.FREQ_MAX)
            self.ENABLE_SPECTRAL_CENTROID = settings.value("audio/enable_spectral_centroid", self.ENABLE_SPECTRAL_CENTROID, bool)
            self.ENABLE_MFCC = settings.value("audio/enable_mfcc", self.ENABLE_MFCC, bool)
            self.ENABLE_TEMPO = settings.value("audio/enable_tempo", self.ENABLE_TEMPO, bool)
            
            # Visualization settings
            self.COLOR_SATURATION = settings.value("visualization/color_saturation", self.COLOR_SATURATION, float)
            self.COLOR_BRIGHTNESS = settings.value("visualization/color_brightness", self.COLOR_BRIGHTNESS, float)
            self.MORPH_SPEED = settings.value("visualization/morph_speed", self.MORPH_SPEED, float)
            self.COLOR_TRANSITION_SPEED = settings.value("visualization/color_transition_speed", self.COLOR_TRANSITION_SPEED, float)
            self.FLASH_DURATION = settings.value("visualization/flash_duration", self.FLASH_DURATION, int)
            self.SMOOTH_SHADING = settings.value("visualization/smooth_shading", self.SMOOTH_SHADING, bool)
            self.WIREFRAME_MODE = settings.value("visualization/wireframe_mode", self.WIREFRAME_MODE, bool)
            self.AUTO_ROTATE = settings.value("visualization/auto_rotate", self.AUTO_ROTATE, bool)
            self.ROTATION_SPEED = settings.value("visualization/rotation_speed", self.ROTATION_SPEED, float)
            
            # Load default color
            default_color_list = settings.value("visualization/default_color", self.DEFAULT_COLOR)
            if isinstance(default_color_list, str):
                # Handle color stored as hex string
                from PySide6.QtGui import QColor
                color = QColor(default_color_list)
                self.DEFAULT_COLOR = [color.redF(), color.greenF(), color.blueF()]
            elif isinstance(default_color_list, (list, tuple)) and len(default_color_list) == 3:
                self.DEFAULT_COLOR = list(default_color_list)
            
            # Performance settings
            self.TARGET_FPS = settings.value("performance/target_fps", self.TARGET_FPS, int)
            self.VSYNC = settings.value("performance/vsync", self.VSYNC, bool)
            self.RENDER_QUALITY = settings.value("performance/render_quality", self.RENDER_QUALITY)
            self.MEMORY_LIMIT = settings.value("performance/memory_limit", self.MEMORY_LIMIT, int)
            self.CLEANUP_INTERVAL = settings.value("performance/cleanup_interval", self.CLEANUP_INTERVAL, int)
            self.FPS_WARNING = settings.value("performance/fps_warning", self.FPS_WARNING, int)
            self.MEMORY_WARNING = settings.value("performance/memory_warning", self.MEMORY_WARNING, int)
            self.CPU_WARNING = settings.value("performance/cpu_warning", self.CPU_WARNING, int)
            self.ENABLE_PROFILING = settings.value("performance/enable_profiling", self.ENABLE_PROFILING, bool)
            self.VERBOSE_LOGGING = settings.value("performance/verbose_logging", self.VERBOSE_LOGGING, bool)
            self.SHOW_DEBUG_INFO = settings.value("performance/show_debug_info", self.SHOW_DEBUG_INFO, bool)
            
            # Advanced settings
            self.OSC_IP = settings.value("advanced/osc_ip", self.OSC_IP)
            self.OSC_PORT = settings.value("advanced/osc_port", self.OSC_PORT, int)
            self.ENABLE_OSC = settings.value("advanced/enable_osc", self.ENABLE_OSC, bool)
            self.WORKER_THREADS = settings.value("advanced/worker_threads", self.WORKER_THREADS, int)
            self.AUDIO_PRIORITY = settings.value("advanced/audio_priority", self.AUDIO_PRIORITY)
            self.CONFIG_DIR = settings.value("advanced/config_dir", self.CONFIG_DIR)
            self.LOG_DIR = settings.value("advanced/log_dir", self.LOG_DIR)
            self.ENABLE_ML_FEATURES = settings.value("advanced/enable_ml", self.ENABLE_ML_FEATURES, bool)
            self.ENABLE_NETWORK_SYNC = settings.value("advanced/enable_network_sync", self.ENABLE_NETWORK_SYNC, bool)
            self.ENABLE_PLUGIN_SYSTEM = settings.value("advanced/enable_plugins", self.ENABLE_PLUGIN_SYSTEM, bool)
            
            # Update directories after loading
            self._ensure_directories()
            
        except Exception as e:
            print(f"Error loading settings: {e}")
    
    def save_to_settings(self, settings: QSettings):
        """Save configuration to QSettings."""
        try:
            # Core settings
            settings.setValue("core/mesh_resolution", self.MESH_RESOLUTION)
            settings.setValue("core/midi_port", self.MIDI_PORT)
            settings.setValue("core/audio_sample_rate", self.AUDIO_SAMPLE_RATE)
            settings.setValue("core/audio_chunk_size", self.AUDIO_CHUNK_SIZE)
            settings.setValue("core/audio_onset_threshold", self.AUDIO_ONSET_THRESHOLD)
            
            # MIDI settings
            settings.setValue("midi/velocity_sensitivity", self.VELOCITY_SENSITIVITY)
            settings.setValue("midi/note_min", self.NOTE_MIN)
            settings.setValue("midi/note_max", self.NOTE_MAX)
            settings.setValue("midi/morph_cc", self.MORPH_CC)
            settings.setValue("midi/note_timeout", self.NOTE_TIMEOUT)
            settings.setValue("midi/channel", self.MIDI_CHANNEL)
            settings.setValue("midi/auto_reconnect", self.MIDI_AUTO_RECONNECT)
            settings.setValue("midi/enabled", self.MIDI_ENABLED)
            
            # Audio settings
            settings.setValue("audio/enabled", self.AUDIO_ENABLED)
            settings.setValue("audio/device_index", self.AUDIO_DEVICE_INDEX)
            settings.setValue("audio/color_strength", self.AUDIO_COLOR_STRENGTH)
            settings.setValue("audio/morph_strength", self.AUDIO_MORPH_STRENGTH)
            settings.setValue("audio/freq_min", self.FREQ_MIN)
            settings.setValue("audio/freq_max", self.FREQ_MAX)
            settings.setValue("audio/enable_spectral_centroid", self.ENABLE_SPECTRAL_CENTROID)
            settings.setValue("audio/enable_mfcc", self.ENABLE_MFCC)
            settings.setValue("audio/enable_tempo", self.ENABLE_TEMPO)
            
            # Visualization settings
            settings.setValue("visualization/color_saturation", self.COLOR_SATURATION)
            settings.setValue("visualization/color_brightness", self.COLOR_BRIGHTNESS)
            settings.setValue("visualization/morph_speed", self.MORPH_SPEED)
            settings.setValue("visualization/color_transition_speed", self.COLOR_TRANSITION_SPEED)
            settings.setValue("visualization/flash_duration", self.FLASH_DURATION)
            settings.setValue("visualization/smooth_shading", self.SMOOTH_SHADING)
            settings.setValue("visualization/wireframe_mode", self.WIREFRAME_MODE)
            settings.setValue("visualization/auto_rotate", self.AUTO_ROTATE)
            settings.setValue("visualization/rotation_speed", self.ROTATION_SPEED)
            settings.setValue("visualization/default_color", self.DEFAULT_COLOR)
            
            # Performance settings
            settings.setValue("performance/target_fps", self.TARGET_FPS)
            settings.setValue("performance/vsync", self.VSYNC)
            settings.setValue("performance/render_quality", self.RENDER_QUALITY)
            settings.setValue("performance/memory_limit", self.MEMORY_LIMIT)
            settings.setValue("performance/cleanup_interval", self.CLEANUP_INTERVAL)
            settings.setValue("performance/fps_warning", self.FPS_WARNING)
            settings.setValue("performance/memory_warning", self.MEMORY_WARNING)
            settings.setValue("performance/cpu_warning", self.CPU_WARNING)
            settings.setValue("performance/enable_profiling", self.ENABLE_PROFILING)
            settings.setValue("performance/verbose_logging", self.VERBOSE_LOGGING)
            settings.setValue("performance/show_debug_info", self.SHOW_DEBUG_INFO)
            
            # Advanced settings
            settings.setValue("advanced/osc_ip", self.OSC_IP)
            settings.setValue("advanced/osc_port", self.OSC_PORT)
            settings.setValue("advanced/enable_osc", self.ENABLE_OSC)
            settings.setValue("advanced/worker_threads", self.WORKER_THREADS)
            settings.setValue("advanced/audio_priority", self.AUDIO_PRIORITY)
            settings.setValue("advanced/config_dir", self.CONFIG_DIR)
            settings.setValue("advanced/log_dir", self.LOG_DIR)
            settings.setValue("advanced/enable_ml", self.ENABLE_ML_FEATURES)
            settings.setValue("advanced/enable_network_sync", self.ENABLE_NETWORK_SYNC)
            settings.setValue("advanced/enable_plugins", self.ENABLE_PLUGIN_SYSTEM)
            
            settings.sync()
            
        except Exception as e:
            print(f"Error saving settings: {e}")
    
    def load_from_file(self, filename):
        """Load configuration from JSON file."""
        try:
            with open(filename, 'r') as f:
                config_data = json.load(f)
            
            # Update attributes from loaded data
            for section, values in config_data.items():
                for key, value in values.items():
                    # Convert key to config attribute name
                    attr_name = key.upper()
                    if hasattr(self, attr_name):
                        setattr(self, attr_name, value)
            
            self._ensure_directories()
            return True
            
        except Exception as e:
            print(f"Error loading config from file: {e}")
            return False
    
    def save_to_file(self, filename):
        """Save configuration to JSON file."""
        try:
            config_data = {
                "core": {
                    "mesh_resolution": self.MESH_RESOLUTION,
                    "midi_port": self.MIDI_PORT,
                    "audio_sample_rate": self.AUDIO_SAMPLE_RATE,
                    "audio_chunk_size": self.AUDIO_CHUNK_SIZE,
                    "audio_onset_threshold": self.AUDIO_ONSET_THRESHOLD
                },
                "midi": {
                    "enabled": self.MIDI_ENABLED,
                    "velocity_sensitivity": self.VELOCITY_SENSITIVITY,
                    "note_min": self.NOTE_MIN,
                    "note_max": self.NOTE_MAX,
                    "morph_cc": self.MORPH_CC,
                    "note_timeout": self.NOTE_TIMEOUT,
                    "channel": self.MIDI_CHANNEL,
                    "auto_reconnect": self.MIDI_AUTO_RECONNECT
                },
                "audio": {
                    "enabled": self.AUDIO_ENABLED,
                    "device_index": self.AUDIO_DEVICE_INDEX,
                    "color_strength": self.AUDIO_COLOR_STRENGTH,
                    "morph_strength": self.AUDIO_MORPH_STRENGTH,
                    "freq_min": self.FREQ_MIN,
                    "freq_max": self.FREQ_MAX,
                    "enable_spectral_centroid": self.ENABLE_SPECTRAL_CENTROID,
                    "enable_mfcc": self.ENABLE_MFCC,
                    "enable_tempo": self.ENABLE_TEMPO
                },
                "visualization": {
                    "color_saturation": self.COLOR_SATURATION,
                    "color_brightness": self.COLOR_BRIGHTNESS,
                    "morph_speed": self.MORPH_SPEED,
                    "color_transition_speed": self.COLOR_TRANSITION_SPEED,
                    "flash_duration": self.FLASH_DURATION,
                    "smooth_shading": self.SMOOTH_SHADING,
                    "wireframe_mode": self.WIREFRAME_MODE,
                    "auto_rotate": self.AUTO_ROTATE,
                    "rotation_speed": self.ROTATION_SPEED,
                    "default_color": self.DEFAULT_COLOR
                },
                "performance": {
                    "target_fps": self.TARGET_FPS,
                    "vsync": self.VSYNC,
                    "render_quality": self.RENDER_QUALITY,
                    "memory_limit": self.MEMORY_LIMIT,
                    "cleanup_interval": self.CLEANUP_INTERVAL,
                    "fps_warning": self.FPS_WARNING,
                    "memory_warning": self.MEMORY_WARNING,
                    "cpu_warning": self.CPU_WARNING,
                    "enable_profiling": self.ENABLE_PROFILING,
                    "verbose_logging": self.VERBOSE_LOGGING,
                    "show_debug_info": self.SHOW_DEBUG_INFO
                },
                "advanced": {
                    "osc_ip": self.OSC_IP,
                    "osc_port": self.OSC_PORT,
                    "enable_osc": self.ENABLE_OSC,
                    "worker_threads": self.WORKER_THREADS,
                    "audio_priority": self.AUDIO_PRIORITY,
                    "config_dir": self.CONFIG_DIR,
                    "log_dir": self.LOG_DIR,
                    "enable_ml": self.ENABLE_ML_FEATURES,
                    "enable_network_sync": self.ENABLE_NETWORK_SYNC,
                    "enable_plugins": self.ENABLE_PLUGIN_SYSTEM
                }
            }
            
            with open(filename, 'w') as f:
                json.dump(config_data, f, indent=2)
            
            return True
            
        except Exception as e:
            print(f"Error saving config to file: {e}")
            return False
    
    def reset_to_defaults(self):
        """Reset all settings to default values."""
        self.__init__()
    
    def get_summary(self):
        """Get a summary of current configuration."""
        return {
            "Mesh Resolution": self.MESH_RESOLUTION,
            "MIDI Port": self.MIDI_PORT or "Auto-detect",
            "MIDI Enabled": "Yes" if self.MIDI_ENABLED else "No",
            "Audio Sample Rate": f"{self.AUDIO_SAMPLE_RATE} Hz",
            "Audio Enabled": "Yes" if self.AUDIO_ENABLED else "No",
            "Audio Buffer Size": self.AUDIO_CHUNK_SIZE,
            "Target FPS": self.TARGET_FPS,
            "Performance Monitoring": "Enabled" if self.ENABLE_PROFILING else "Disabled",
            "OSC Output": "Enabled" if self.ENABLE_OSC else "Disabled",
            "Auto-rotate": "Enabled" if self.AUTO_ROTATE else "Disabled"
        }
    
    def to_dict(self):
        """Convert configuration to dictionary for compatibility."""
        return {attr: getattr(self, attr) for attr in dir(self) 
                if not attr.startswith('_') and not callable(getattr(self, attr))}
    
    def from_dict(self, config_dict):
        """Load configuration from dictionary."""
        for key, value in config_dict.items():
            if hasattr(self, key):
                setattr(self, key, value)
    
    def __str__(self):
        """String representation of configuration."""
        summary = self.get_summary()
        return "\n".join([f"{key}: {value}" for key, value in summary.items()])
